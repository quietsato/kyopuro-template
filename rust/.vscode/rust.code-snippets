{
  "Union-Find Tree": {
    "prefix": "union-find-tree",
    "body": [
      "struct UnionFind {",
      "    parent: Vec<usize>,",
      "}",
      "",
      "impl UnionFind {",
      "    fn new(size: usize) -> Self {",
      "        UnionFind {",
      "            parent: (0..size).collect(),",
      "        }",
      "    }",
      "    fn unite(&mut self, a: usize, b: usize) -> usize {",
      "        let (mut a, mut b) = (a, b);",
      "        if a > b {",
      "            mem::swap(&mut a, &mut b);",
      "        }",
      "",
      "        let (ra, rb) = (self.root(a), self.root(b));",
      "",
      "        if ra != rb {",
      "            self.parent[rb] = ra;",
      "        }",
      "        ra",
      "    }",
      "",
      "    fn root(&mut self, i: usize) -> usize {",
      "        if i == self.parent[i] {",
      "            i",
      "        } else {",
      "            self.parent[i] = self.root(self.parent[i]);",
      "            self.parent[i]",
      "        }",
      "    }",
      "}"
    ],
    "description": "Union-Find Tree"
  },
  "MOD 10^9+7": {
    "prefix": "mod_10^9",
    "body": [
      "let MOD = BigUint::from(1_000_000_007u64);"
    ],
    "description": "MOD 10^9+7"
  },
  "GCD": {
    "prefix": "fn_gcd",
    "body": [
      "fn gcd(x: u64, y: u64) -> u64 {",
      "    let (a, b) = (x.max(y), x.min(y));",
      "",
      "    if a % b == 0 {",
      "        b",
      "    } else {",
      "        gcd(b, a % b)",
      "    }",
      "}"
    ],
    "description": "GCD"
  }
}